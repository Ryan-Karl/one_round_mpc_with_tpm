  ClientTest.cpp
c:\devsoft\mpir\mpirxx.h(1610): warning C4244: 'argument': conversion from '__int64' to 'mpir_si', possible loss of data
c:\devsoft\mpir\mpirxx.h(1611): warning C4244: 'argument': conversion from 'unsigned __int64' to 'mpir_ui', possible loss of data
c:\devsoft\mpir\mpirxx.h(1677): warning C4244: 'argument': conversion from '__int64' to 'mpir_si', possible loss of data
c:\devsoft\mpir\mpirxx.h(1678): warning C4244: 'argument': conversion from 'unsigned __int64' to 'mpir_ui', possible loss of data
c:\devsoft\mpir\mpirxx.h(1822): warning C4244: 'argument': conversion from '__int64' to 'mpir_si', possible loss of data
c:\devsoft\mpir\mpirxx.h(1823): warning C4244: 'argument': conversion from 'unsigned __int64' to 'mpir_ui', possible loss of data
c:\devsoft\mpir\mpirxx.h(1905): warning C4244: 'argument': conversion from '__int64' to 'mpir_si', possible loss of data
c:\devsoft\mpir\mpirxx.h(1907): warning C4244: 'argument': conversion from 'unsigned __int64' to 'mpir_ui', possible loss of data
c:\devsoft\mpir\mpirxx.h(2045): warning C4244: 'argument': conversion from '__int64' to 'mpir_si', possible loss of data
c:\devsoft\mpir\mpirxx.h(2047): warning C4244: 'argument': conversion from '__int64' to 'mpir_si', possible loss of data
c:\devsoft\mpir\mpirxx.h(2048): warning C4244: 'argument': conversion from 'unsigned __int64' to 'mpir_ui', possible loss of data
c:\devsoft\mpir\mpirxx.h(2050): warning C4244: 'argument': conversion from 'unsigned __int64' to 'mpir_ui', possible loss of data
c:\devsoft\mpir\mpirxx.h(2136): warning C4244: 'argument': conversion from '__int64' to 'mpir_si', possible loss of data
c:\devsoft\mpir\mpirxx.h(2138): warning C4244: 'argument': conversion from 'unsigned __int64' to 'mpir_ui', possible loss of data
c:\devsoft\mpir\mpirxx.h(3341): warning C4244: 'argument': conversion from '__int64' to 'const long', possible loss of data
c:\devsoft\mpir\mpirxx.h(3341): warning C4244: 'argument': conversion from 'unsigned __int64' to 'const unsigned long', possible loss of data
c:\devsoft\mpir\mpirxx.h(3342): warning C4244: 'argument': conversion from '__int64' to 'const long', possible loss of data
c:\devsoft\mpir\mpirxx.h(3342): warning C4244: 'argument': conversion from 'unsigned __int64' to 'const unsigned long', possible loss of data
c:\devsoft\mpir\mpirxx.h(3343): warning C4244: 'argument': conversion from '__int64' to 'const long', possible loss of data
c:\devsoft\mpir\mpirxx.h(3343): warning C4244: 'argument': conversion from 'unsigned __int64' to 'const unsigned long', possible loss of data
c:\devsoft\mpir\mpirxx.h(3344): warning C4244: 'argument': conversion from '__int64' to 'const long', possible loss of data
c:\devsoft\mpir\mpirxx.h(3344): warning C4244: 'argument': conversion from 'unsigned __int64' to 'const unsigned long', possible loss of data
c:\devsoft\mpir\mpirxx.h(3345): warning C4244: 'argument': conversion from '__int64' to 'const long', possible loss of data
c:\devsoft\mpir\mpirxx.h(3345): warning C4244: 'argument': conversion from 'unsigned __int64' to 'const unsigned long', possible loss of data
c:\devsoft\mpir\mpirxx.h(3347): warning C4244: 'argument': conversion from '__int64' to 'const long', possible loss of data
c:\devsoft\mpir\mpirxx.h(3347): warning C4244: 'argument': conversion from 'unsigned __int64' to 'const unsigned long', possible loss of data
c:\devsoft\mpir\mpirxx.h(3348): warning C4244: 'argument': conversion from '__int64' to 'const long', possible loss of data
c:\devsoft\mpir\mpirxx.h(3348): warning C4244: 'argument': conversion from 'unsigned __int64' to 'const unsigned long', possible loss of data
c:\devsoft\mpir\mpirxx.h(3349): warning C4244: 'argument': conversion from '__int64' to 'const long', possible loss of data
c:\devsoft\mpir\mpirxx.h(3349): warning C4244: 'argument': conversion from 'unsigned __int64' to 'const unsigned long', possible loss of data
c:\devsoft\mpir\mpirxx.h(3359): warning C4244: 'argument': conversion from '__int64' to 'const long', possible loss of data
c:\devsoft\mpir\mpirxx.h(3359): warning C4244: 'argument': conversion from 'unsigned __int64' to 'const unsigned long', possible loss of data
c:\devsoft\mpir\mpirxx.h(3360): warning C4244: 'argument': conversion from '__int64' to 'const long', possible loss of data
c:\devsoft\mpir\mpirxx.h(3360): warning C4244: 'argument': conversion from 'unsigned __int64' to 'const unsigned long', possible loss of data
c:\devsoft\mpir\mpirxx.h(3361): warning C4244: 'argument': conversion from '__int64' to 'const long', possible loss of data
c:\devsoft\mpir\mpirxx.h(3361): warning C4244: 'argument': conversion from 'unsigned __int64' to 'const unsigned long', possible loss of data
c:\devsoft\mpir\mpirxx.h(3362): warning C4244: 'argument': conversion from '__int64' to 'const long', possible loss of data
c:\devsoft\mpir\mpirxx.h(3362): warning C4244: 'argument': conversion from 'unsigned __int64' to 'const unsigned long', possible loss of data
c:\devsoft\mpir\mpirxx.h(3372): warning C4244: 'argument': conversion from '__int64' to 'const long', possible loss of data
c:\devsoft\mpir\mpirxx.h(3372): warning C4244: 'argument': conversion from 'unsigned __int64' to 'const unsigned long', possible loss of data
c:\devsoft\mpir\mpirxx.h(3373): warning C4244: 'argument': conversion from '__int64' to 'const long', possible loss of data
c:\devsoft\mpir\mpirxx.h(3373): warning C4244: 'argument': conversion from 'unsigned __int64' to 'const unsigned long', possible loss of data
c:\devsoft\mpir\mpirxx.h(3374): warning C4244: 'argument': conversion from '__int64' to 'const long', possible loss of data
c:\devsoft\mpir\mpirxx.h(3374): warning C4244: 'argument': conversion from 'unsigned __int64' to 'const unsigned long', possible loss of data
c:\devsoft\mpir\mpirxx.h(3375): warning C4244: 'argument': conversion from '__int64' to 'const long', possible loss of data
c:\devsoft\mpir\mpirxx.h(3375): warning C4244: 'argument': conversion from 'unsigned __int64' to 'const unsigned long', possible loss of data
c:\users\ckrkr\documents\github\one_round_mpc_with_tpm\tss.msr\client_backup\networkutils.h(52): warning C4018: '<': signed/unsigned mismatch
c:\users\ckrkr\documents\github\one_round_mpc_with_tpm\tss.msr\client_backup\networkutils.h(64): warning C4018: '<': signed/unsigned mismatch
c:\users\ckrkr\documents\github\one_round_mpc_with_tpm\tss.msr\client_backup\clienttest.cpp(50): warning C4018: '<': signed/unsigned mismatch
c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\thr\xthread(238): error C2672: 'std::invoke': no matching overloaded function found
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\thr\xthread(246): note: see reference to function template instantiation 'void std::_LaunchPad<_Target>::_Execute<0,1,2,3,4,5>(std::tuple<void (__cdecl *)(Server &,unsigned int,unsigned int,std::vector<std::vector<BYTE,std::allocator<_Ty>>,std::allocator<std::vector<_Ty,std::allocator<_Ty>>>> &,const std::vector<_Ty,std::allocator<_Ty>> &),Server,unsigned int,unsigned int,std::vector<std::vector<_Ty,std::allocator<_Ty>>,std::allocator<std::vector<_Ty,std::allocator<_Ty>>>>,std::vector<std::vector<_Ty,std::allocator<_Ty>>,std::allocator<std::vector<_Ty,std::allocator<_Ty>>>>> &,std::integer_sequence<unsigned int,0,1,2,3,4,5>)' being compiled
          with
          [
              _Target=std::unique_ptr<std::tuple<void (__cdecl *)(Server &,unsigned int,unsigned int,std::vector<std::vector<BYTE,std::allocator<BYTE>>,std::allocator<std::vector<BYTE,std::allocator<BYTE>>>> &,const std::vector<BYTE,std::allocator<BYTE>> &),Server,unsigned int,unsigned int,std::vector<std::vector<BYTE,std::allocator<BYTE>>,std::allocator<std::vector<BYTE,std::allocator<BYTE>>>>,std::vector<std::vector<BYTE,std::allocator<BYTE>>,std::allocator<std::vector<BYTE,std::allocator<BYTE>>>>>,std::default_delete<std::tuple<void (__cdecl *)(Server &,unsigned int,unsigned int,std::vector<std::vector<BYTE,std::allocator<BYTE>>,std::allocator<std::vector<BYTE,std::allocator<BYTE>>>> &,const std::vector<BYTE,std::allocator<BYTE>> &),Server,unsigned int,unsigned int,std::vector<std::vector<BYTE,std::allocator<BYTE>>,std::allocator<std::vector<BYTE,std::allocator<BYTE>>>>,std::vector<std::vector<BYTE,std::allocator<BYTE>>,std::allocator<std::vector<BYTE,std::allocator<BYTE>>>>>>>,
              _Ty=BYTE
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\thr\xthread(245): note: see reference to function template instantiation 'void std::_LaunchPad<_Target>::_Execute<0,1,2,3,4,5>(std::tuple<void (__cdecl *)(Server &,unsigned int,unsigned int,std::vector<std::vector<BYTE,std::allocator<_Ty>>,std::allocator<std::vector<_Ty,std::allocator<_Ty>>>> &,const std::vector<_Ty,std::allocator<_Ty>> &),Server,unsigned int,unsigned int,std::vector<std::vector<_Ty,std::allocator<_Ty>>,std::allocator<std::vector<_Ty,std::allocator<_Ty>>>>,std::vector<std::vector<_Ty,std::allocator<_Ty>>,std::allocator<std::vector<_Ty,std::allocator<_Ty>>>>> &,std::integer_sequence<unsigned int,0,1,2,3,4,5>)' being compiled
          with
          [
              _Target=std::unique_ptr<std::tuple<void (__cdecl *)(Server &,unsigned int,unsigned int,std::vector<std::vector<BYTE,std::allocator<BYTE>>,std::allocator<std::vector<BYTE,std::allocator<BYTE>>>> &,const std::vector<BYTE,std::allocator<BYTE>> &),Server,unsigned int,unsigned int,std::vector<std::vector<BYTE,std::allocator<BYTE>>,std::allocator<std::vector<BYTE,std::allocator<BYTE>>>>,std::vector<std::vector<BYTE,std::allocator<BYTE>>,std::allocator<std::vector<BYTE,std::allocator<BYTE>>>>>,std::default_delete<std::tuple<void (__cdecl *)(Server &,unsigned int,unsigned int,std::vector<std::vector<BYTE,std::allocator<BYTE>>,std::allocator<std::vector<BYTE,std::allocator<BYTE>>>> &,const std::vector<BYTE,std::allocator<BYTE>> &),Server,unsigned int,unsigned int,std::vector<std::vector<BYTE,std::allocator<BYTE>>,std::allocator<std::vector<BYTE,std::allocator<BYTE>>>>,std::vector<std::vector<BYTE,std::allocator<BYTE>>,std::allocator<std::vector<BYTE,std::allocator<BYTE>>>>>>>,
              _Ty=BYTE
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\thr\xthread(242): note: while compiling class template member function 'void std::_LaunchPad<_Target>::_Run(std::_LaunchPad<_Target> *) noexcept'
          with
          [
              _Target=std::unique_ptr<std::tuple<void (__cdecl *)(Server &,unsigned int,unsigned int,std::vector<std::vector<BYTE,std::allocator<BYTE>>,std::allocator<std::vector<BYTE,std::allocator<BYTE>>>> &,const std::vector<BYTE,std::allocator<BYTE>> &),Server,unsigned int,unsigned int,std::vector<std::vector<BYTE,std::allocator<BYTE>>,std::allocator<std::vector<BYTE,std::allocator<BYTE>>>>,std::vector<std::vector<BYTE,std::allocator<BYTE>>,std::allocator<std::vector<BYTE,std::allocator<BYTE>>>>>,std::default_delete<std::tuple<void (__cdecl *)(Server &,unsigned int,unsigned int,std::vector<std::vector<BYTE,std::allocator<BYTE>>,std::allocator<std::vector<BYTE,std::allocator<BYTE>>>> &,const std::vector<BYTE,std::allocator<BYTE>> &),Server,unsigned int,unsigned int,std::vector<std::vector<BYTE,std::allocator<BYTE>>,std::allocator<std::vector<BYTE,std::allocator<BYTE>>>>,std::vector<std::vector<BYTE,std::allocator<BYTE>>,std::allocator<std::vector<BYTE,std::allocator<BYTE>>>>>>>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\thr\xthread(230): note: see reference to function template instantiation 'void std::_LaunchPad<_Target>::_Run(std::_LaunchPad<_Target> *) noexcept' being compiled
          with
          [
              _Target=std::unique_ptr<std::tuple<void (__cdecl *)(Server &,unsigned int,unsigned int,std::vector<std::vector<BYTE,std::allocator<BYTE>>,std::allocator<std::vector<BYTE,std::allocator<BYTE>>>> &,const std::vector<BYTE,std::allocator<BYTE>> &),Server,unsigned int,unsigned int,std::vector<std::vector<BYTE,std::allocator<BYTE>>,std::allocator<std::vector<BYTE,std::allocator<BYTE>>>>,std::vector<std::vector<BYTE,std::allocator<BYTE>>,std::allocator<std::vector<BYTE,std::allocator<BYTE>>>>>,std::default_delete<std::tuple<void (__cdecl *)(Server &,unsigned int,unsigned int,std::vector<std::vector<BYTE,std::allocator<BYTE>>,std::allocator<std::vector<BYTE,std::allocator<BYTE>>>> &,const std::vector<BYTE,std::allocator<BYTE>> &),Server,unsigned int,unsigned int,std::vector<std::vector<BYTE,std::allocator<BYTE>>,std::allocator<std::vector<BYTE,std::allocator<BYTE>>>>,std::vector<std::vector<BYTE,std::allocator<BYTE>>,std::allocator<std::vector<BYTE,std::allocator<BYTE>>>>>>>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\thr\xthread(257): note: see reference to class template instantiation 'std::_LaunchPad<_Target>' being compiled
          with
          [
              _Target=std::unique_ptr<std::tuple<void (__cdecl *)(Server &,unsigned int,unsigned int,std::vector<std::vector<BYTE,std::allocator<BYTE>>,std::allocator<std::vector<BYTE,std::allocator<BYTE>>>> &,const std::vector<BYTE,std::allocator<BYTE>> &),Server,unsigned int,unsigned int,std::vector<std::vector<BYTE,std::allocator<BYTE>>,std::allocator<std::vector<BYTE,std::allocator<BYTE>>>>,std::vector<std::vector<BYTE,std::allocator<BYTE>>,std::allocator<std::vector<BYTE,std::allocator<BYTE>>>>>,std::default_delete<std::tuple<void (__cdecl *)(Server &,unsigned int,unsigned int,std::vector<std::vector<BYTE,std::allocator<BYTE>>,std::allocator<std::vector<BYTE,std::allocator<BYTE>>>> &,const std::vector<BYTE,std::allocator<BYTE>> &),Server,unsigned int,unsigned int,std::vector<std::vector<BYTE,std::allocator<BYTE>>,std::allocator<std::vector<BYTE,std::allocator<BYTE>>>>,std::vector<std::vector<BYTE,std::allocator<BYTE>>,std::allocator<std::vector<BYTE,std::allocator<BYTE>>>>>>>
          ]
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\thread(49): note: see reference to function template instantiation 'void std::_Launch<std::unique_ptr<std::tuple<void (__cdecl *)(Server &,unsigned int,unsigned int,std::vector<std::vector<BYTE,std::allocator<_Ty>>,std::allocator<std::vector<_Ty,std::allocator<_Ty>>>> &,const std::vector<_Ty,std::allocator<_Ty>> &),Server,unsigned int,unsigned int,std::vector<std::vector<_Ty,std::allocator<_Ty>>,std::allocator<std::vector<_Ty,std::allocator<_Ty>>>>,std::vector<std::vector<_Ty,std::allocator<_Ty>>,std::allocator<std::vector<_Ty,std::allocator<_Ty>>>>>,std::default_delete<std::tuple<void (__cdecl *)(Server &,unsigned int,unsigned int,std::vector<std::vector<_Ty,std::allocator<_Ty>>,std::allocator<std::vector<_Ty,std::allocator<_Ty>>>> &,const std::vector<_Ty,std::allocator<_Ty>> &),Server,unsigned int,unsigned int,std::vector<std::vector<_Ty,std::allocator<_Ty>>,std::allocator<std::vector<_Ty,std::allocator<_Ty>>>>,std::vector<std::vector<_Ty,std::allocator<_Ty>>,std::allocator<std::vector<_Ty,std::allocator<_Ty>>>>>>>>(_Thrd_t *,_Target &&)' being compiled
          with
          [
              _Ty=BYTE,
              _Target=std::unique_ptr<std::tuple<void (__cdecl *)(Server &,unsigned int,unsigned int,std::vector<std::vector<BYTE,std::allocator<BYTE>>,std::allocator<std::vector<BYTE,std::allocator<BYTE>>>> &,const std::vector<BYTE,std::allocator<BYTE>> &),Server,unsigned int,unsigned int,std::vector<std::vector<BYTE,std::allocator<BYTE>>,std::allocator<std::vector<BYTE,std::allocator<BYTE>>>>,std::vector<std::vector<BYTE,std::allocator<BYTE>>,std::allocator<std::vector<BYTE,std::allocator<BYTE>>>>>,std::default_delete<std::tuple<void (__cdecl *)(Server &,unsigned int,unsigned int,std::vector<std::vector<BYTE,std::allocator<BYTE>>,std::allocator<std::vector<BYTE,std::allocator<BYTE>>>> &,const std::vector<BYTE,std::allocator<BYTE>> &),Server,unsigned int,unsigned int,std::vector<std::vector<BYTE,std::allocator<BYTE>>,std::allocator<std::vector<BYTE,std::allocator<BYTE>>>>,std::vector<std::vector<BYTE,std::allocator<BYTE>>,std::allocator<std::vector<BYTE,std::allocator<BYTE>>>>>>>
          ]
  c:\users\ckrkr\documents\github\one_round_mpc_with_tpm\tss.msr\client_backup\clienttest.cpp(251): note: see reference to function template instantiation 'std::thread::thread<void(__cdecl *)(Server &,unsigned int,unsigned int,std::vector<std::vector<BYTE,std::allocator<_Ty>>,std::allocator<std::vector<_Ty,std::allocator<_Ty>>>> &,const std::vector<_Ty,std::allocator<_Ty>> &),Server&,unsigned int,unsigned int&,std::vector<std::vector<_Ty,std::allocator<_Ty>>,std::allocator<std::vector<_Ty,std::allocator<_Ty>>>>&,std::vector<std::vector<_Ty,std::allocator<_Ty>>,std::allocator<std::vector<_Ty,std::allocator<_Ty>>>>&,void>(_Fn &&,Server &,unsigned int &&,unsigned int &,std::vector<std::vector<_Ty,std::allocator<_Ty>>,std::allocator<std::vector<_Ty,std::allocator<_Ty>>>> &,std::vector<std::vector<_Ty,std::allocator<_Ty>>,std::allocator<std::vector<_Ty,std::allocator<_Ty>>>> &)' being compiled
          with
          [
              _Ty=BYTE,
              _Fn=void (__cdecl *)(Server &,unsigned int,unsigned int,std::vector<std::vector<BYTE,std::allocator<BYTE>>,std::allocator<std::vector<BYTE,std::allocator<BYTE>>>> &,const std::vector<BYTE,std::allocator<BYTE>> &)
          ]
c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\thr\xthread(238): error C2893: Failed to specialize function template 'unknown-type std::invoke(_Callable &&,_Types &&...) noexcept(<expr>)'
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\thr\xthread(238): note: With the following template arguments:
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\thr\xthread(238): note: '_Callable=void (__cdecl *)(Server &,unsigned int,unsigned int,std::vector<std::vector<BYTE,std::allocator<_Ty>>,std::allocator<std::vector<_Ty,std::allocator<_Ty>>>> &,const std::vector<_Ty,std::allocator<_Ty>> &)'
  c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\thr\xthread(238): note: '_Types={Server, unsigned int, unsigned int, std::vector<std::vector<BYTE,std::allocator<_Ty>>,std::allocator<std::vector<_Ty,std::allocator<_Ty>>>>, std::vector<std::vector<BYTE,std::allocator<_Ty>>,std::allocator<std::vector<_Ty,std::allocator<_Ty>>>>}'
