/*
Compute a simple crosstabulation

Party A has a two column array: 
Column 0 is a unique identifier (e.g. SSN as an int)
Column 1 is a value (e.g. salary)

Party B has a two column array: 
Column 0 is a unique identifier (e.g. SSN as an int)
Column 1 is a classe (e.g. age group) -- This is assumed to be a small number in the range 0 ... BINS-1

This script computes the sum of salaries by age group, i.e., it computes the sum of A column 1 grouped by B column 1.
The result is a vector of length BINS

If we assume the parties have agreed on the overlapping list of SSNs, then they can sort their lists beforehand, 
and perform the crosstabs, and party B can create BINS characteristic vectors, and they can compute the solution 
using BINS dot products.
*/

#define DBSIZE 10
#define ENTRYSIZE 32
#define BINS 5
#parties 2

typedef int_t 32 int
typedef uint_t 1 tint
typedef uint_t 1 sint

typedef struct_t Ainputs
{
	int data[DBSIZE];
}

typedef struct_t Binputs
{
	int data[DBSIZE][BINS];
}

typedef struct_t ctdata
{
	int data[BINS];
}

#input 1 Ainputs
#output 1 ctdata
#input 2 Binputs
#output 2 ctdata

function void main()
{
	Ainputs x = input1;
	Binputs y = input2;
    
    int xinput[DBSIZE];
    int yinput[DBSIZE][BINS];
    
    int result[BINS];

    xinput = x.data;
    yinput = y.data;
	ctdata out;

    int t;


    for(int i=0;i<BINS;i++)
    {
		t = 0;
        for(int j=0;j<DBSIZE;j++)
        {
			t = t + xinput[j]*yinput[j][i];
		}
		result[i] = t;
    }

    out.data = result;

    output1 = out;
    output2 = out;
}
